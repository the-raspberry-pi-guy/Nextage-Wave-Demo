#!/usr/bin/env python
from __future__ import print_function

import roslib
import numpy
import sys
import rospy
import rospkg
import cv2
from std_msgs.msg import String
from geometry_msgs.msg import Point
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError

class image_converter:

    def __init__(self):
        haar_file = rospy.get_param('~HaarFile', '')
        self.face_cascade = cv2.CascadeClassifier(haar_file)
        self.bridge = CvBridge()
        self.image_sub = rospy.Subscriber(rospy.resolve_name("~input"),Image,self.callback)
        self.pub = rospy.Publisher(rospy.resolve_name("~output"), Point)

    def callback(self,data):
        try:
            cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
            gray = cv2.cvtColor(cv_image, cv2.COLOR_BGR2GRAY)
            faces = self.face_cascade.detectMultiScale(gray, 1.1, 4)

            if isinstance(faces, numpy.ndarray):
                target = faces[0]
                x = target[0]
                y = target[1]
                z = 0
            else:
                x = -1
                y = -1
                z = -1

            self.pub.publish(x,y,z)

            for (x, y, w, h) in faces:
                cv2.rectangle(cv_image, (x, y), (x+w, y+h), (255, 0, 0), 2)

        except CvBridgeError as e:
            print(e)

        cv2.imshow("Image window", cv_image)
        cv2.waitKey(3)

def main(args):
    rospy.init_node('image_converter', anonymous=True)
    ic = image_converter()    
    try:
        rospy.spin()
    except KeyboardInterrupt:
        print("Shutting down")
    cv2.destroyAllWindows()

if __name__ == '__main__':
    main(sys.argv)