#!/usr/bin/env python
from __future__ import print_function

import roslib
import numpy
import sys
from time import time
import rospy
import rospkg
import cv2
from std_msgs.msg import String
from geometry_msgs.msg import Point
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError

class ImageConverter:

    def __init__(self):
        haar_file = rospy.get_param('~HaarFile', '')
        self.face_cascade = cv2.CascadeClassifier(haar_file)
        self.bridge = CvBridge()
        self.image_sub = rospy.Subscriber(rospy.resolve_name("~input"),Image,self.callback, queue_size=1)
        self.pub = rospy.Publisher(rospy.resolve_name("~output"), Point)

    def callback(self,data):
        try:
            cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
            #rows, cols, _channels = map(int, cv_image.shape)
            #cv_image = cv2.pyrDown(cv_image, dstsize=(cols // 2, rows // 2))
            #cv_image = cv2.pyrDown(cv_image, dstsize=(cols // 4, rows // 4))
            gray = cv2.cvtColor(cv_image, cv2.COLOR_BGR2GRAY)
            faces = self.face_cascade.detectMultiScale(gray, 1.1, 4)
            
            for (x, y, w, h) in faces:
                msg = Point(x*4, y*4, 0)
                self.pub.publish(msg)
                cv2.rectangle(cv_image, (x, y), (x+w, y+h), (255, 0, 0), 2)
            
            cv2.imshow("Image window", cv_image)
            cv2.waitKey(3)

        except CvBridgeError as e:
            print(e)


def main(args):
    rospy.init_node('image_converter', anonymous=True)
    ic = ImageConverter()
    try:
        rospy.spin()
    except KeyboardInterrupt:
        print("Shutting down")
    cv2.destroyAllWindows()

if __name__ == '__main__':
    main(sys.argv)
