#!/usr/bin/env python
from __future__ import print_function

import pyexotica as exo
from time import sleep
import sys
import rospy
from geometry_msgs.msg import Point
from std_srvs.srv import Trigger, TriggerResponse, TriggerRequest

class WaveDemo:

    def __init__(self):
        self.state = "neutral"
        self.person_detected = False
        self.rate = rospy.Rate(2)
        rospy.wait_for_service('wave_service')
        self.waver = rospy.ServiceProxy('wave_service', Trigger)
        self.homer = rospy.ServiceProxy('home_service', Trigger)
        self.wave_service_trigger = TriggerRequest()
        rospy.Subscriber(rospy.resolve_name("~input"), Point, self.callback)
        result = self.homer(self.wave_service_trigger)
        self.watching_timer = rospy.Time.now()

    def spin(self):
        while not rospy.is_shutdown():
            # 3 state FSM representing different robot operations
            
            if self.state == "neutral":
                print("[wavedemo] In neutral")
                if self.person_detected:
                    self.state = "watching"
                    self.watching_timer = rospy.Time.now()

            elif self.state == "watching":
                print("[wavedemo] Watching person")
                if not self.person_detected:
                    print("[wavedemo] Person was detected but now is not")
                    self.state = "neutral"

                if (rospy.Time.now() - self.watching_timer) >= rospy.Duration(secs=3):
                    self.wave()
                    self.state = "cooldown"
                else:
                    pass
            
            elif self.state == "cooldown":
                print("[wavedemo] In cooldown after wave")
                if not self.person_detected:
                    self.state = "neutral"

            self.person_detected = False
            self.rate.sleep()

    def callback(self,data):
        self.person_detected = True

    def wave(self):
        print("[wavedemo] Calling wave service")
        result = self.waver(self.wave_service_trigger)


def main(args):
    rospy.init_node("wave_demo_listener", anonymous=True)
    wd = WaveDemo()
    try:
        wd.spin()
    except KeyboardInterrupt:
        print("Shutting down")

if __name__ == '__main__':
    main(sys.argv)
