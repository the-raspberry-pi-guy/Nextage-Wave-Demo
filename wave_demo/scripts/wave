#!/usr/bin/env python

import pyexotica as exo
from pyexotica.publish_trajectory import *
from time import sleep
import numpy as np
import rospy
from geometry_msgs.msg import Point

exo.Setup.init_ros()
ik = exo.Setup.load_solver('{wave_demo}/resources/nextage_ik.xml')
ompl = exo.Setup.load_solver('{wave_demo}/resources/nextage_ompl.xml')

ik.get_problem().set_rho('Position1', 1e3)
ik.get_problem().set_rho('Position2', 0)
ik.get_problem().set_rho('Position3', 0)
q1 = ik.solve()[0]
publish_pose(q1, ik.get_problem())
# sleep(1)


ik.get_problem().set_rho('Position1', 0)
ik.get_problem().set_rho('Position2', 1e3)
ik.get_problem().set_rho('Position3', 0)
q2 = ik.solve()[0]
publish_pose(q2, ik.get_problem())
# sleep(1)

ik.get_problem().set_rho('Position1', 0)
ik.get_problem().set_rho('Position2', 0)
ik.get_problem().set_rho('Position3', 1e3)
q3 = ik.solve()[0]
publish_pose(q3, ik.get_problem())
# sleep(1)

q0 = q1*0.

solution = []
ompl.get_problem().start_state = q1
ompl.get_problem().goal_state = q2
print('Solving 1')
solution += ompl.solve().tolist()
ompl.get_problem().start_state = q2
ompl.get_problem().goal_state = q3
print('Solving 1')
solution += ompl.solve().tolist()
ompl.get_problem().start_state = q3
ompl.get_problem().goal_state = q2
print('Solving 1')
solution += ompl.solve().tolist()
ompl.get_problem().start_state = q2
ompl.get_problem().goal_state = q1
print('Solving 1')
solution += ompl.solve().tolist()

solution = np.array(solution)
publish_trajectory(solution, 10.0, ompl.get_problem())
#print(q)
#publish_pose(q, ik.get_problem())
sleep(5)
