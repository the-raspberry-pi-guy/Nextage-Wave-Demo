#!/usr/bin/env python

import pyexotica as exo
from pyexotica.publish_trajectory import *
from time import sleep
import sys
import numpy as np
import rospy
from geometry_msgs.msg import Point
from trajectory_msgs.msg import JointTrajectoryPoint, JointTrajectory
from std_srvs.srv import Trigger, TriggerResponse
import matplotlib.pyplot as plt
import signal

class NextageWave:

    def __init__(self):

        self.ompl = exo.Setup.load_solver('{wave_demo}/resources/nextage_ompl.xml')
        self.trajectory_time = 60.0
        
        self.initpos = np.zeros(12)
        self.wave1 = np.array([0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.81471187e-18, -8.44162526e-01, -3.74435514e-01, -5.40411544e-19, -2.06449916e+00,  1.32041479e-18])
        self.wave2 = np.array([0, 0, 0, 0, 0, 0, -0.03067915, -0.7899913, -0.504348, 2.7050467, -1.4010756, 2.18432966])
        self.pos = [self.initpos, self.wave1, self.wave2, self.wave1, self.initpos]

        self.limits = self.ompl.get_problem().get_bounds()
        self.names = self.ompl.get_problem().get_scene().get_controlled_joint_names()

        self.trajectory_message = JointTrajectory()
        self.trajectory_message.joint_names = [x.encode('ascii') for x in self.names]
        t0 = 1.0

        for i in range(0, len(self.pos)):
            point = JointTrajectoryPoint()
            point.velocities = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            point.positions = self.pos[i].tolist()
            point.time_from_start = rospy.Duration(t0 + float(i) * 10)
            self.trajectory_message.points.append(point)

        self.home_message = JointTrajectory()
        self.home_message.joint_names = self.trajectory_message.joint_names
        point = JointTrajectoryPoint()
        point.positions = self.initpos 
        point.time_from_start = rospy.Duration(5.0)
        self.home_message.points.append(point)

        self.service = rospy.Service("wave_service", Trigger, self.trigger_response)
        self.service = rospy.Service("home_service", Trigger, self.trigger_home)
        self.pub = rospy.Publisher("/fullbody_controller/command", JointTrajectory, queue_size=1)
        self.boolTrigger = False

    def spin(self):
        while not rospy.is_shutdown():
            try:
                if self.boolTrigger == True:
                    print("SHOULD WAVE")
                    self.trajectory_message.header.stamp = rospy.Time.now()
                    self.pub.publish(self.trajectory_message)
                    #publish_trajectory(self.pos, self.trajectory_time, self.ompl.get_problem(), True)
                    self.boolTrigger = False
                sleep(0.1)
            except KeyboardInterrupt:
                break


    def trigger_home(self, request):
        self.home_message.header.stamp = rospy.Time.now()
        self.pub.publish(self.home_message)

        sleep(5.0)
        return TriggerResponse(success=True, message="Done")

    def trigger_response(self, request):
        self.boolTrigger = True
        sleep(self.trajectory_time)
        return TriggerResponse(success=True, message="Wave initiated")

def sig_int_handler(signal, frame):
    raise KeyboardInterrupt

def main(args):
    rospy.init_node("wave_service")
    exo.Setup.init_ros()
    signal.signal(signal.SIGINT, sig_int_handler)
    wave = NextageWave()
    wave.spin()


if __name__ == '__main__':
    main(sys.argv)
