#!/usr/bin/env python

import pyexotica as exo
from pyexotica.publish_trajectory import *
from time import sleep
import sys
import numpy as np
import rospy
from geometry_msgs.msg import Point
from std_srvs.srv import Trigger, TriggerResponse

class NextageWave:

    def __init__(self):
        self.trajectory_time = 5
        self.ik = exo.Setup.load_solver('{wave_demo}/resources/nextage_ik.xml')
        self.ompl = exo.Setup.load_solver('{wave_demo}/resources/nextage_ompl.xml')
        self.ik_solve()
        self.solution = self.solve_ompl()
        self.service = rospy.Service("wave_service", Trigger, self.trigger_response)
        self.boolTrigger = False

    def spin(self):
        while not rospy.is_shutdown():
            if self.boolTrigger == True:
                publish_trajectory(self.solution, self.trajectory_time, self.ompl.get_problem(), True)
                self.boolTrigger = False
            sleep(0.1)


    def ik_solve(self):
        self.ik.get_problem().set_rho('Position1', 1e3)
        self.ik.get_problem().set_rho('Position2', 0)
        self.ik.get_problem().set_rho('Position3', 0)
        self.q1 = self.ik.solve()[0]

        self.ik.get_problem().set_rho('Position1', 0)
        self.ik.get_problem().set_rho('Position2', 1e3)
        self.ik.get_problem().set_rho('Position3', 0)
        self.q2 = self.ik.solve()[0]

        self.ik.get_problem().set_rho('Position1', 0)
        self.ik.get_problem().set_rho('Position2', 0)
        self.ik.get_problem().set_rho('Position3', 1e3)
        self.q3 = self.ik.solve()[0]

        
    def solve_ompl(self):
        solution = []
        self.ompl.get_problem().start_state = self.q1
        self.ompl.get_problem().goal_state = self.q2
        print('Solving 1')
        solution += self.ompl.solve().tolist()
        self.ompl.get_problem().start_state = self.q2
        self.ompl.get_problem().goal_state = self.q3
        print('Solving 1')
        solution += self.ompl.solve().tolist()
        self.ompl.get_problem().start_state = self.q3
        self.ompl.get_problem().goal_state = self.q2
        print('Solving 1')
        solution += self.ompl.solve().tolist()
        self.ompl.get_problem().start_state = self.q2
        self.ompl.get_problem().goal_state = self.q1
        print('Solving 1')
        solution += self.ompl.solve().tolist()
        solution = np.array(solution)
        return solution

    def trigger_response(self, request):
        self.boolTrigger = True
        #sleep(self.trajectory_time)
        return TriggerResponse(success=True, message="Wave initiated")

def main(args):
    rospy.init_node("wave_service")
    exo.Setup.init_ros()
    wave = NextageWave()
    wave.spin()


if __name__ == '__main__':
    main(sys.argv)